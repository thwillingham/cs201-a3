func findSet(v) {
    if (v.parent == v) {
        return v;
    } else {
        v.parent = findSet(v.parent);
        return v.parent;
    }
}

ds class
    rootList = doubly-linked list
    methods
        makeSet
        findSet (path compression)
        union (by rank)


program flow:
import file
  -add edges to linked list (if not already in list)
  -add vertices to linked list (if not already in list)
  -heapsort edges, output to array
  -heapsort vertices, output to array
kruskal
  -make set of every vertex
  -traverse edges and update disjoint set accordingly

func bfs(v) {
    color all vertices white;
    v.color = grey;
    var q = new Queue();
    q.enqueue(v);
    while (q.size > 0) {
        u = q.dequeue();
        for each w adj to u {
            if w.color == white {
                w.color = grey;
                q.enqueue(w);
            }
        }
    u.color = black;
    }
}


program flow:
import file
  -add edges to sorted linked list (if not already in list)
  -add vertices to sorted linked list (if not already in list)
  -convert edges to array
  -convert vertices to array
kruskal
  -make set of every vertex
  -traverse edges and update disjoint set accordingly & update adjacency lists for each node.
print graph
  -traverse edges in order looking for anything with rootNode
  -enqueue any edge that meets the criteria
  -dequeue



func printGraph {
    if parent in tree, sort edge array; print edge array; make new empty edge array; make new empty tree; add vertex to tree
    else add edge to list
}

func bfsPrintNew() {
    get root as ll node
    add root to rbt
    add root to array
    add root to queue
    while queue is not empty {
        cur = dequeue
        if (cur->parent in rbt) {
            sort array
            print all nodes in array; and dequeue that number of nodes;
            make new rbt
            make new array
            add cur to rbt
            add cur to array
        }
        adjCur = head node of cur1 adjacency list
        while adjCur is not null {
            temp = adjCur->next
            if (adjCur.color == 0) {
                add adjCur to queue
                adjCur.color = 1
                adjCur.parent = cur
            }
            adjCur = temp
        }
    }
}
